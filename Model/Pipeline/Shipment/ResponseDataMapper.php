<?php

/**
 * See LICENSE.md for license details.
 */

declare(strict_types=1);

namespace Dhl\EcomUs\Model\Pipeline\Shipment;

use Dhl\EcomUs\Model\Pipeline\Shipment\ShipmentResponse\LabelResponse;
use Dhl\EcomUs\Model\Pipeline\Shipment\ShipmentResponse\LabelResponseFactory;
use Dhl\Sdk\EcomUs\Api\Data\LabelInterface;
use Dhl\ShippingCore\Api\Data\Pipeline\ShipmentResponse\LabelResponseInterface;
use Dhl\ShippingCore\Api\Data\Pipeline\ShipmentResponse\ShipmentErrorResponseInterface;
use Dhl\ShippingCore\Api\Data\Pipeline\ShipmentResponse\ShipmentErrorResponseInterfaceFactory;
use Magento\Framework\Phrase;
use Magento\Sales\Api\Data\ShipmentInterface;

/**
 * Response mapper.
 *
 * Convert API response into the carrier response format that the shipping module understands.
 *
 * @see \Magento\Shipping\Model\Carrier\AbstractCarrierOnline::requestToShipment
 *
 * @author  Christoph AÃŸmann <christoph.assmann@netresearch.de>
 * @link    https://www.netresearch.de/
 */
class ResponseDataMapper
{
    /**
     * @var LabelResponseFactory
     */
    private $shipmentResponseFactory;

    /**
     * @var ShipmentErrorResponseInterfaceFactory
     */
    private $errorResponseFactory;

    /**
     * ResponseDataMapper constructor.
     *
     * @param LabelResponseFactory $shipmentResponseFactory
     * @param ShipmentErrorResponseInterfaceFactory $errorResponseFactory
     */
    public function __construct(
        LabelResponseFactory $shipmentResponseFactory,
        ShipmentErrorResponseInterfaceFactory $errorResponseFactory
    ) {
        $this->shipmentResponseFactory = $shipmentResponseFactory;
        $this->errorResponseFactory = $errorResponseFactory;
    }

    /**
     * Map created shipment into response object as required by the shipping module.
     *
     * Tracking numbers are only available in domestic shipment responses.
     * For cross-border, tracking numbers are generated by the destination
     * carrier and will be available later in the process.
     *
     * As discussed with DHL, we set the tracking number if available, otherwise the
     * Package ID. Both can be used at the Tracking API.
     *
     * @param LabelInterface $label
     * @param ShipmentInterface $salesShipment
     * @return LabelResponseInterface
     */
    public function createShipmentResponse(
        LabelInterface $label,
        ShipmentInterface $salesShipment
    ): LabelResponseInterface {
        $responseData = [
            LabelResponse::REQUEST_INDEX => $label->getPackageId(),
            LabelResponse::SALES_SHIPMENT => $salesShipment,
            LabelResponse::TRACKING_NUMBER => $label->getTrackingId() ?: $label->getPackageId(),
            LabelResponse::SHIPPING_LABEL_CONTENT => $label->getLabelData(),
            LabelResponse::TRACKING_ID => $label->getTrackingId(),
            LabelResponse::PACKAGE_ID => $label->getPackageId(),
            LabelResponse::DHL_PACKAGE_ID => $label->getDhlPackageId(),
        ];

        return $this->shipmentResponseFactory->create(['data' => $responseData]);
    }

    /**
     * Map error message into response object as required by the shipping module.
     *
     * @param string $requestIndex
     * @param Phrase $message
     * @param ShipmentInterface $salesShipment
     * @return ShipmentErrorResponseInterface
     */
    public function createErrorResponse(
        string $requestIndex,
        Phrase $message,
        ShipmentInterface $salesShipment
    ): ShipmentErrorResponseInterface {
        $responseData = [
            ShipmentErrorResponseInterface::REQUEST_INDEX => $requestIndex,
            ShipmentErrorResponseInterface::ERRORS => $message,
            ShipmentErrorResponseInterface::SALES_SHIPMENT => $salesShipment,
        ];

        return $this->errorResponseFactory->create(['data' => $responseData]);
    }
}
